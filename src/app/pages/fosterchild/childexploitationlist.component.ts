import { Component} from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';
import { Router, ActivatedRoute} from '@angular/router'
import { Common } from '../common'
import { Base } from '../services/base.service'
import { ChildExploitationDTO } from './DTO/childexploitationdto'
import { PagesComponent } from '../pages.component';
import { APICallService } from '../services/apicallservice.service';
import { SaveDraftInfoDTO} from '../savedraft/DTO/savedraftinfodto';
import { AgencyKeyNameValueCnfgDTO } from '../superadmin/DTO/agencykeynamecnfgdto';
@Component
    ({
    selector: 'ChildExploitationList',
    templateUrl: './childexploitationlist.component.template.html',
    })

export class ChildExploitationListComponent {
    objAgencyKeyNameValueCnfgDTO: AgencyKeyNameValueCnfgDTO = new AgencyKeyNameValueCnfgDTO();
    public searchText: string = "";
    public loading:boolean = false;
    tableSource=[];
    childExploitationList=[];
    lstChildExploitation = [];
    objChildExploitationDTO: ChildExploitationDTO = new ChildExploitationDTO();
    returnVal;
    objQeryVal;
    ChildId: number;
    controllerName = "ChildExploitation";
    objSaveDraftInfoDTO: SaveDraftInfoDTO = new SaveDraftInfoDTO();
    lstTemp = [];
    columns =[];
    //Multiple signature colour code applied.
    constructor(private apiService: APICallService, private _formBuilder: FormBuilder,
        private _router: Router, private modal: PagesComponent,
        private route: ActivatedRoute) {
        this.showGridColumns();
        this.route.params.subscribe(data => this.objQeryVal = data);
        if (this.objQeryVal.mid == 16) {
            if (Common.GetSession("ReferralChildId") != null && Common.GetSession("ReferralChildId") != "null") {
                this.ChildId = parseInt(Common.GetSession("ReferralChildId"));
                this.bindChildExploitation();
            }
            else {
                Common.SetSession("UrlReferral", "pages/referral/childexploitationlist/16");
                this._router.navigate(['/pages/referral/childprofilelist/0/16']);
            }
        }
        else if (this.objQeryVal.mid == 4) {
            if (Common.GetSession("ChildId") != null && Common.GetSession("ChildId") != "null") {
                this.ChildId = parseInt(Common.GetSession("ChildId"));
                this.bindChildExploitation();
            }
            else {
                Common.SetSession("UrlReferral", "pages/child/childexploitationlist/4");
                this._router.navigate(['/pages/child/childprofilelist/1/4']);
            }
        }
    }
    private showGridColumns()
    {
        this.objAgencyKeyNameValueCnfgDTO.AgencyProfileId = parseInt(Common.GetSession("AgencyProfileId"));
        this.objAgencyKeyNameValueCnfgDTO.AgencyKeyNameCnfgId = 28;
        this.apiService.post("AgencyKeyNameCnfg", "GetById", this.objAgencyKeyNameValueCnfgDTO).then(data => {
            if(data)
            {              
                this.objAgencyKeyNameValueCnfgDTO = data;     
                if(this.objAgencyKeyNameValueCnfgDTO.Value!=null && this.objAgencyKeyNameValueCnfgDTO.Value=="1")
                {                   
                    this.columns=[
                        {name:'',prop:'IsDocumentExist',sortable:false,width:'30'},
                        {name:'Date',prop:'RiskAssessmentIndicatorsDate',sortable:true,width:'200',date:'Y'},
                        {name:'Status',prop:'SaveAsDraftStatus',sortable:true,width:'100'},
                        {name:'Edit',prop:'Edit',sortable:false,width:'60'},
                        {name:'View',prop:'View',sortable:false,width:'60'},
                        {name:'Delete',prop:'Delete',sortable:false,width:'60'},
                        {name:'Signature', prop:'SignatureStatus',sortable:false,width:'60'}]
                       // {name:'Signature', prop:'IsFCSignatureSigned',sortable:false,width:'60',link:'/pages/child/childexploitationsignature'}];
                }
                else
                {                    
                    this.columns=[
                        {name:'',prop:'IsDocumentExist',sortable:false,width:'30'},
                        {name:'Date',prop:'RiskAssessmentIndicatorsDate',sortable:true,width:'200',date:'Y'},
                        {name:'Status',prop:'SaveAsDraftStatus',sortable:true,width:'100'},
                        {name:'Edit',prop:'Edit',sortable:false,width:'60'},
                        {name:'View',prop:'View',sortable:false,width:'60'},
                        {name:'Delete',prop:'Delete',sortable:false,width:'60'}];
                }
            }
        });

    }
    private bindChildExploitation() {
        this.loading = true;
        if (this.ChildId != null) {
            //this.apiService.get(this.controllerName, "GetAllByChildId", this.ChildId).then(data => {
              this.apiService.get(this.controllerName, "GetList", this.ChildId).then(data => {
                this.childExploitationList=data;
                this.loading=false;
                //this.lstTemp = data;
                //this.fnLoadSaveDraft();
            });
        }
    }
    fnLoadSaveDraft() {
        this.objSaveDraftInfoDTO.AgencyProfileId = parseInt(Common.GetSession("AgencyProfileId"));
        this.objSaveDraftInfoDTO.FormCnfgId = 238;
        this.objSaveDraftInfoDTO.UserTypeCnfgId = 5;
        this.objSaveDraftInfoDTO.TypeId = this.ChildId;
        let lstSaveDraft = [];
        this.apiService.post("SaveAsDraftInfo", "getall", this.objSaveDraftInfoDTO).then(data => {
            let jsonData = [];
            data.forEach(item => {
                jsonData = JSON.parse(item.JsonList);
                jsonData.forEach(T => {
                    lstSaveDraft.push(T);
                });

            });
            this.lstChildExploitation = this.lstTemp.concat(lstSaveDraft);
            //this.childExploitationList=this.getTableSource(this.lstChildExploitation);
        });
    }

    fnAddData() {
        this._router.navigate(['/pages/child/childexploitationdata/0/4']);
    }

    edit(Id, hasDraft) {
        if (hasDraft)
            Common.SetSession("SaveAsDraft", "Y");
        else
            Common.SetSession("SaveAsDraft", "N");
        this._router.navigate(['/pages/child/childexploitationdata', Id, 4]);
    }

    delete(SequenceNo, hasDraft) {
        this.objChildExploitationDTO.SequenceNo = SequenceNo;
        //this.objChildExploitationDTO.UniqueID = UniqueID;
        if (!hasDraft)
            this.apiService.delete(this.controllerName, this.objChildExploitationDTO).then(data => this.Respone(data));
        else {
            this.objSaveDraftInfoDTO.FormCnfgId = 238;
            this.objSaveDraftInfoDTO.UserTypeCnfgId = 5;
            this.objSaveDraftInfoDTO.TypeId = this.ChildId;
            this.objSaveDraftInfoDTO.SequenceNo = SequenceNo;
            this.apiService.delete("SaveAsDraftInfo", this.objSaveDraftInfoDTO).then(data => {
                this.Respone(data);
            });
        }
    }
    
    private Respone(data) {
        if (data.IsError == true) {
            this.modal.alertDanger(data.ErrorMessage);
        }
        else if (data.IsError == false) {
            this.modal.alertSuccess(Common.GetDeleteSuccessfullMsg);
            this.bindChildExploitation();
        }
    }
    private getTableSource(data):any{
        this.tableSource = [];
        let seqNos = [...new Set(data.map(item => item.SequenceNo))];
            seqNos.forEach( SeqNo =>{
                let temp:any= {};
                const seqGroup = data.filter(element => element.SequenceNo == SeqNo);
                seqGroup.forEach( element => {
                        temp.SequenceNo = element.SequenceNo;
                        temp.IsFCSignatureSigned = element.IsFCSignatureSigned;
                        temp.IsDocumentExist = element.IsDocumentExist;
                        if(element.FieldName === "RiskAssessmentIndicatorsDate")
                            temp.RiskAssessmentIndicatorsDate = element.FieldValue;
                        else if(element.FieldName === "SaveAsDraftStatus")
                            temp.SaveAsDraftStatus = element.FieldValue==0? 'Submitted':'Saved as Draft';
                        else if(element.FieldName === "IsActive")
                        {
                            temp.IsActive = element.FieldValue;
                            temp.UniqueId = element.UniqueID;
                        }
                });
                this.tableSource.push(temp);
            });
           
            return this.tableSource;
            //console.log(JSON.stringify(this.rows));
    }
    onEdit($event){
        if($event.SaveAsDraftStatus=='Submitted')
            this.edit($event.SequenceNo,false);
        else if($event.SaveAsDraftStatus=='Saved as Draft')
            this.edit($event.SequenceNo,true);
    }
    onDelete($event){
        if($event.SaveAsDraftStatus=='Submitted')
            this.delete($event.SequenceNo,false);
        else if($event.SaveAsDraftStatus=='Saved as Draft')
            this.delete($event.SequenceNo,true);
    }
    onSignClick($event){
        this._router.navigate(['/pages/child/childexploitationsignature',$event.SequenceNo]);
    }
}